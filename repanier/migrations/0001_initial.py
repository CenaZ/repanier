# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2017-07-14 05:52
from __future__ import unicode_literals

import datetime
from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djangocms_text_ckeditor.fields
import mptt.fields
import parler.models
import recurrence.fields
import repanier.fields.RepanierMoneyField
import repanier.picture.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation_date', models.DateField(db_index=True, verbose_name='operation_date')),
                ('operation_comment', models.CharField(blank=True, max_length=100, null=True, verbose_name='operation_comment')),
                ('operation_status', models.CharField(choices=[('100', 'This is not the latest total'), ('150', '150'), ('210', '210'), ('220', '220'), ('250', '250'), ('300', 'This is the next latest bank total'), ('400', 'This is the latest bank total')], db_index=True, default='100', max_length=3, verbose_name='Bank balance status')),
                ('bank_amount_in', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='payment_on_the_account', max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='bank_amount_in')),
                ('bank_amount_out', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='payment_from_the_account', max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='bank_amount_out')),
                ('is_updated_on', models.DateTimeField(auto_now=True, verbose_name='is_updated_on')),
            ],
            options={
                'verbose_name': 'bank account movement',
                'ordering': ('-operation_date', '-id'),
                'verbose_name_plural': 'bank account movements',
            },
        ),
        migrations.CreateModel(
            name='BoxContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_quantity', models.DecimalField(decimal_places=3, default=Decimal('0'), max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='content quantity')),
                ('calculated_customer_content_price', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='customer content price')),
                ('calculated_content_deposit', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='deposit to add to the original content price', max_digits=8, verbose_name='content deposit')),
            ],
            options={
                'verbose_name': 'box content',
                'verbose_name_plural': 'boxes content',
            },
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(default='', max_length=50, verbose_name='group name')),
                ('test_mode', models.BooleanField(default=False, verbose_name='test mode')),
                ('login_attempt_counter', models.DecimalField(decimal_places=0, default=Decimal('0'), max_digits=2, verbose_name='login attempt counter')),
                ('password_reset_on', models.DateTimeField(blank=True, default=None, null=True, verbose_name='password_reset_on')),
                ('name', models.CharField(choices=[('100', 'Permanence'), ('200', 'Closure'), ('300', 'Delivery'), ('400', 'Order'), ('500', 'Opening'), ('600', 'Distribution')], default='100', max_length=3, verbose_name='offers name')),
                ('currency', models.CharField(choices=[('100', 'Euro'), ('200', 'Franc'), ('300', 'Local')], default='100', max_length=3, verbose_name='currency')),
                ('max_week_wo_participation', models.DecimalField(decimal_places=0, default=Decimal('0'), help_text='0 mean : never display a pop up.', max_digits=2, validators=[django.core.validators.MinValueValidator(0)], verbose_name='display a pop up on the order form after this max week wo participation')),
                ('send_opening_mail_to_customer', models.BooleanField(default=True, verbose_name='send opening mail to customers')),
                ('send_abstract_order_mail_to_customer', models.BooleanField(default=False, verbose_name='send abstract order mail to customers')),
                ('send_order_mail_to_customer', models.BooleanField(default=True, verbose_name='send order mail to customers')),
                ('send_cancel_order_mail_to_customer', models.BooleanField(default=True, verbose_name='send cancel order mail to customers')),
                ('send_abstract_order_mail_to_producer', models.BooleanField(default=False, verbose_name='send abstract order mail to producers')),
                ('send_order_mail_to_producer', models.BooleanField(default=True, verbose_name='send order mail to producers')),
                ('send_order_mail_to_board', models.BooleanField(default=True, verbose_name='send order mail to board')),
                ('send_invoice_mail_to_customer', models.BooleanField(default=True, verbose_name='send invoice mail to customers')),
                ('send_invoice_mail_to_producer', models.BooleanField(default=False, verbose_name='send invoice mail to producers')),
                ('invoice', models.BooleanField(default=True, verbose_name='activate invoice')),
                ('close_wo_sending', models.BooleanField(default=False, verbose_name='close wo sending')),
                ('display_anonymous_order_form', models.BooleanField(default=True, verbose_name='display anonymous order form')),
                ('display_producer_on_order_form', models.BooleanField(default=True, verbose_name='display producers on order form')),
                ('display_who_is_who', models.BooleanField(default=True, verbose_name='display who is who')),
                ('bank_account', models.CharField(blank=True, default='', max_length=100, null=True, verbose_name='bank account')),
                ('vat_id', models.CharField(blank=True, default='', max_length=20, null=True, verbose_name='vat_id')),
                ('page_break_on_customer_check', models.BooleanField(default=False, verbose_name='page break on customer check')),
                ('sms_gateway_mail', models.EmailField(blank=True, default='', help_text='To actually send sms, use for e.g. on a GSM : https://play.google.com/store/apps/details?id=eu.apksoft.android.smsgateway', max_length=50, null=True, verbose_name='sms gateway email')),
                ('customers_must_confirm_orders', models.BooleanField(default=False, verbose_name='customers must confirm orders')),
                ('membership_fee', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='membership fee')),
                ('membership_fee_duration', models.DecimalField(decimal_places=0, default=Decimal('0'), help_text='number of month(s). 0 mean : no membership fee.', max_digits=3, validators=[django.core.validators.MinValueValidator(0)], verbose_name='membership fee duration')),
                ('home_site', models.URLField(blank=True, default='', null=True, verbose_name='home site')),
                ('transport', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='This amount is added to order less than min_transport.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Shipping cost')),
                ('min_transport', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='This is the minimum order amount to avoid shipping cost.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minium order amount for free shipping cost')),
                ('notification_is_public', models.BooleanField(default=False, verbose_name='the notification is public')),
                ('email_is_custom', models.BooleanField(default=False, verbose_name='Email is customised')),
                ('email_host', models.CharField(blank=True, default='smtp.gmail.com', help_text='For @gmail.com, see: https://mail.google.com/mail/u/0/#settings/fwdandpop and activate POP', max_length=50, null=True, verbose_name='email host')),
                ('email_port', models.IntegerField(blank=True, default=587, help_text='Usually 587 for @gmail.com, otherwise 25', null=True, verbose_name='email port')),
                ('email_use_tls', models.BooleanField(default=True, help_text='TLS is used otherwise SSL is used', verbose_name='email use tls')),
                ('email_host_user', models.EmailField(blank=True, default='username@gmail.com', help_text='For @gmail.com : username@gmail.com', max_length=50, null=True, verbose_name='email host user')),
                ('email_host_password', models.CharField(blank=True, default='', help_text='For @gmail.com, you must generate an application password, see: https://security.google.com/settings/security/apppasswords', max_length=25, null=True, verbose_name='email host password')),
            ],
            options={
                'verbose_name_plural': 'configurations',
                'verbose_name': 'configuration',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ConfigurationTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('group_label', models.CharField(blank=True, default='', max_length=100, verbose_name='group label')),
                ('how_to_register', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='', verbose_name='how to register')),
                ('notification', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='', verbose_name='notification')),
                ('offer_customer_mail', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='\n                                      Bonjour,<br />\n                                      <br />\n                                      Les commandes de la {{ permanence_link }} sont maintenant ouvertes auprès de : {{ offer_producer }}.<br />\n                                      {% if offer_description %}{{ offer_description }}<br />\n                                      {% endif %}\n                                      {% if offer_recent_detail %}<br />Nouveauté(s) :<br />\n                                      {{ offer_recent_detail }}{% endif %}<br />\n                                      <br />\n                                      {{ signature }}\n                                      ', verbose_name='offer customer mail')),
                ('offer_producer_mail', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='\n                                      Cher/Chère {{ long_profile_name }},<br />\n                                      <br />\n                                      {% if offer_description != "" %}Voici l\'annonce consommateur :<br />\n                                      {{ offer_description }}<br />\n                                      <br />\n                                      {% endif %} Veuillez vérifier votre <strong>{{ offer_link }}</strong>.<br />\n                                      <br />\n                                      {{ signature }}\n                                      ', verbose_name='offer producer mail')),
                ('order_customer_mail', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='\n                                      Bonjour {{ long_basket_name }},<br />\n                                      <br />\n                                      En pièce jointe vous trouverez le montant de votre panier {{ short_basket_name }} de la {{ permanence_link }}.<br />\n                                      <br />\n                                      {{ last_balance }}<br />\n                                      {{ order_amount }}<br />\n                                      {% if on_hold_movement %}{{ on_hold_movement }}<br />\n                                      {% endif %} {% if payment_needed %}{{ payment_needed }}<br />\n                                      {% endif %}<br />\n                                      <br />\n                                      {{ signature }}\n                                      ', verbose_name='order customer mail')),
                ('cancel_order_customer_mail', djangocms_text_ckeditor.fields.HTMLField(blank=True, default="\n                                      Bonjour {{ long_basket_name }},<br />\n                                      <br />\n                                      La commande ci-jointe de votre panier {{ short_basket_name }} de la {{ permanence_link }} <b>a été annulée</b> car vous ne l'avez pas confirmée.<br />\n                                      <br />\n                                      {{ signature }}\n                                      ", verbose_name='cancelled order customer mail')),
                ('order_staff_mail', djangocms_text_ckeditor.fields.HTMLField(blank=True, default="\n                                   Cher/Chère membre de l'équipe de préparation,<br/>\n                                   <br/>\n                                   En pièce jointe vous trouverez la liste de préparation pour la {{ permanence_link }}.<br/>\n                                   <br/>\n                                   L'équipe de préparation est composée de :<br/>\n                                   {{ board_composition }}<br/>\n                                   ou de<br/>\n                                   {{ board_composition_and_description }}<br/>\n                                   <br/>\n                                   {{ signature }}\n                                   ", verbose_name='order staff mail')),
                ('order_producer_mail', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='\n                                      Cher/Chère {{ name }},<br />\n                                      <br />\n                                      {% if order_empty %}Le groupe ne vous a rien acheté pour la {{ permanence_link }}.{% else %}En pièce jointe, vous trouverez la commande du groupe pour la {{ permanence }}.{% if duplicate %}<br />\n                                      <strong>ATTENTION </strong>: La commande est présente en deux exemplaires. Le premier exemplaire est classé par produit et le duplicata est classé par panier.{% else %}{% endif %}{% endif %}<br />\n                                      <br />\n                                      {{ signature }}\n                                      ', verbose_name='order producer mail')),
                ('invoice_customer_mail', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='\n                                        Bonjour {{ name }},<br/>\n                                        <br/>\n                                        En cliquant sur ce lien vous trouverez votre facture pour la {{ permanence_link }}.{% if invoice_description %}<br/>\n                                        <br/>\n                                        {{ invoice_description }}{% endif %}\n                                        <br />\n                                        {{ order_amount }}<br />\n                                        {{ last_balance_link }}<br />\n                                        {% if payment_needed %}{{ payment_needed }}<br />\n                                        {% endif %}<br />\n                                        <br />\n                                        {{ signature }}\n                                        ', verbose_name='invoice customer mail')),
                ('invoice_producer_mail', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='\n                                        Cher/Chère {{ profile_name }},<br/>\n                                        <br/>\n                                        En cliquant sur ce lien vous trouverez le détail de notre paiement pour la {{ permanence_link }}.<br/>\n                                        <br/>\n                                        {{ signature }}\n                                        ', verbose_name='invoice producer mail')),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='repanier.Configuration')),
            ],
            options={
                'db_tablespace': '',
                'default_permissions': (),
                'db_table': 'repanier_configuration_translation',
                'verbose_name': 'configuration Translation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ContractContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_quantity', models.DecimalField(decimal_places=3, default=Decimal('0'), max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='content quantity')),
                ('calculated_customer_content_price', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='customer content price')),
                ('calculated_content_deposit', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='deposit to add to the original content price', max_digits=8, verbose_name='content deposit')),
            ],
            options={
                'verbose_name': 'contract content',
                'verbose_name_plural': 'contracts content',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_attempt_counter', models.DecimalField(decimal_places=0, default=Decimal('0'), max_digits=2, verbose_name='login attempt counter')),
                ('short_basket_name', models.CharField(db_index=True, default='', max_length=25, unique=True, verbose_name='short_basket_name')),
                ('long_basket_name', models.CharField(default='', max_length=100, null=True, verbose_name='long_basket_name')),
                ('email2', models.EmailField(blank=True, default='', max_length=254, null=True, verbose_name='secondary email')),
                ('language', models.CharField(choices=[('fr', 'français')], default='fr', max_length=5, verbose_name='language')),
                ('picture', repanier.picture.fields.AjaxPictureField(blank=True, null=True, verbose_name='picture')),
                ('phone1', models.CharField(blank=True, default='', max_length=25, null=True, verbose_name='phone1')),
                ('phone2', models.CharField(blank=True, default='', max_length=25, null=True, verbose_name='phone2')),
                ('bank_account1', models.CharField(blank=True, default='', max_length=100, null=True, verbose_name='main bank account')),
                ('bank_account2', models.CharField(blank=True, default='', max_length=100, null=True, verbose_name='secondary bank account')),
                ('vat_id', models.CharField(blank=True, default='', max_length=20, null=True, verbose_name='vat_id')),
                ('address', models.TextField(blank=True, default='', null=True, verbose_name='address')),
                ('city', models.CharField(blank=True, default='', max_length=50, null=True, verbose_name='city')),
                ('about_me', models.TextField(blank=True, default='', null=True, verbose_name='about me')),
                ('memo', models.TextField(blank=True, default='', null=True, verbose_name='memo')),
                ('accept_mails_from_members', models.BooleanField(default=False, verbose_name='show my mail to other members')),
                ('accept_phone_call_from_members', models.BooleanField(default=False, verbose_name='show my phone to other members')),
                ('membership_fee_valid_until', models.DateField(default=datetime.date.today, verbose_name='membership fee valid until')),
                ('price_list_multiplier', models.DecimalField(blank=True, decimal_places=4, default=Decimal('1'), help_text='This multiplier is applied to each product ordered by this customer.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Customer price list multiplier')),
                ('password_reset_on', models.DateTimeField(blank=True, default=None, null=True, verbose_name='password_reset_on')),
                ('date_balance', models.DateField(default=datetime.date.today, verbose_name='date_balance')),
                ('balance', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='balance')),
                ('initial_balance', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='initial balance')),
                ('represent_this_buyinggroup', models.BooleanField(default=False, verbose_name='represent_this_buyinggroup')),
                ('is_active', models.BooleanField(default=True, verbose_name='is_active')),
                ('is_group', models.BooleanField(default=False, verbose_name='is a group')),
                ('may_order', models.BooleanField(default=True, verbose_name='may_order')),
                ('valid_email', models.NullBooleanField(default=None, verbose_name='valid_email')),
                ('subscribe_to_email', models.BooleanField(default=True, verbose_name='subscribe to email')),
                ('preparation_order', models.IntegerField(blank=True, default=0, null=True)),
            ],
            options={
                'verbose_name': 'customer',
                'ordering': ('short_basket_name',),
                'verbose_name_plural': 'customers',
            },
        ),
        migrations.CreateModel(
            name='CustomerInvoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('050', 'disabled'), ('100', 'planned'), ('110', 'wait for pre-open'), ('120', 'orders pre-opened'), ('200', 'wait for open'), ('300', 'orders opened'), ('350', 'wait for close'), ('370', 'orders closed'), ('400', 'wait for send'), ('500', 'orders send to producers'), ('600', 'wait for done'), ('700', 'invoices validation test failed'), ('800', 'invoiced'), ('900', 'archived'), ('950', 'cancelled')], default='100', max_length=3, verbose_name='invoice_status')),
                ('date_previous_balance', models.DateField(default=datetime.date.today, verbose_name='date_previous_balance')),
                ('previous_balance', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='previous_balance')),
                ('total_price_with_tax', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='Total purchase amount vat included', max_digits=8, verbose_name='Total amount')),
                ('delta_price_with_tax', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='purchase to add amount vat included', max_digits=8, verbose_name='Total amount')),
                ('delta_transport', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='transport to add', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Delivery point transport')),
                ('total_vat', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=4, default=Decimal('0'), help_text='Vat part of the total purchased', max_digits=9, verbose_name='Total vat')),
                ('delta_vat', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=4, default=Decimal('0'), help_text='vat to add', max_digits=9, verbose_name='Total vat')),
                ('total_deposit', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='deposit to add to the original unit price', max_digits=8, verbose_name='deposit')),
                ('bank_amount_in', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='payment_on_the_account', max_digits=8, verbose_name='bank_amount_in')),
                ('bank_amount_out', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='payment_from_the_account', max_digits=8, verbose_name='bank_amount_out')),
                ('date_balance', models.DateField(default=datetime.date.today, verbose_name='date_balance')),
                ('balance', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='balance')),
                ('is_order_confirm_send', models.BooleanField(choices=[(True, '✓🔐'), (False, '')], default=False, verbose_name='is_order_confirm_send')),
                ('invoice_sort_order', models.IntegerField(blank=True, db_index=True, default=None, null=True, verbose_name='invoice sort order')),
                ('price_list_multiplier', models.DecimalField(blank=True, decimal_places=4, default=Decimal('1'), help_text='This multiplier is applied once for groups with entitled customer or at each customer invoice for open groups.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Delivery point price list multiplier')),
                ('transport', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='This amount is added once for groups with entitled customer or at each customer for open groups.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Delivery point shipping cost')),
                ('min_transport', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='This is the minimum order amount to avoid shipping cost.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minium order amount for free shipping cost')),
                ('is_group', models.BooleanField(default=False, verbose_name='is a group')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.Customer', verbose_name='customer')),
                ('customer_charged', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='invoices_paid', to='repanier.Customer', verbose_name='customer')),
            ],
            options={
                'verbose_name_plural': 'customers invoices',
                'verbose_name': 'customer invoice',
            },
        ),
        migrations.CreateModel(
            name='CustomerProducerInvoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_purchase_with_tax', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='Total selling amount vat included', max_digits=8, verbose_name='producer amount invoiced')),
                ('total_selling_with_tax', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='Total selling amount vat included', max_digits=8, verbose_name='customer amount invoiced')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.Customer', verbose_name='customer')),
            ],
            options={
                'verbose_name_plural': 'customers x producers invoices',
                'verbose_name': 'customer x producer invoice',
            },
        ),
        migrations.CreateModel(
            name='DeliveryBoard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivery_date', models.DateField(blank=True, db_index=True, null=True, verbose_name='delivery date')),
                ('status', models.CharField(choices=[('050', 'disabled'), ('100', 'planned'), ('110', 'wait for pre-open'), ('120', 'orders pre-opened'), ('200', 'wait for open'), ('300', 'orders opened'), ('350', 'wait for close'), ('370', 'orders closed'), ('400', 'wait for send'), ('500', 'orders send to producers'), ('600', 'wait for done'), ('700', 'invoices validation test failed'), ('800', 'invoiced'), ('900', 'archived'), ('950', 'cancelled')], default='100', max_length=3, verbose_name='permanence_status')),
                ('is_updated_on', models.DateTimeField(auto_now=True, verbose_name='is_updated_on')),
                ('highest_status', models.CharField(choices=[('050', 'disabled'), ('100', 'planned'), ('110', 'wait for pre-open'), ('120', 'orders pre-opened'), ('200', 'wait for open'), ('300', 'orders opened'), ('350', 'wait for close'), ('370', 'orders closed'), ('400', 'wait for send'), ('500', 'orders send to producers'), ('600', 'wait for done'), ('700', 'invoices validation test failed'), ('800', 'invoiced'), ('900', 'archived'), ('950', 'cancelled')], default='100', help_text='status of the permanence from planned, orders opened, orders closed, send, done', max_length=3, verbose_name='highest permanence_status')),
            ],
            options={
                'verbose_name_plural': 'deliveries board',
                'verbose_name': 'delivery board',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DeliveryBoardTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('delivery_comment', models.CharField(blank=True, max_length=50, verbose_name='comment')),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='repanier.DeliveryBoard')),
            ],
            options={
                'db_tablespace': '',
                'default_permissions': (),
                'db_table': 'repanier_deliveryboard_translation',
                'verbose_name': 'delivery board Translation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LUT_DeliveryPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='is_active')),
                ('inform_customer_responsible', models.BooleanField(default=False, verbose_name='inform_customer_responsible')),
                ('closed_group', models.BooleanField(default=False, verbose_name='with entitled customer')),
                ('price_list_multiplier', models.DecimalField(blank=True, decimal_places=4, default=Decimal('1'), help_text='This multiplier is applied once for groups with entitled customer.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Delivery point price list multiplier')),
                ('transport', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='This amount is added once for groups with entitled customer or at each customer for open groups.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Delivery point transport')),
                ('min_transport', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='This is the minimum order amount to avoid shipping cost.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minium order amount for free shipping cost')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('customer_responsible', models.ForeignKey(blank=True, default=None, help_text='Invoices are sent to this consumer who is responsible for collecting the payments.', null=True, on_delete=django.db.models.deletion.PROTECT, to='repanier.Customer', verbose_name='customer_responsible')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='repanier.LUT_DeliveryPoint')),
            ],
            options={
                'verbose_name_plural': 'deliveries points',
                'verbose_name': 'delivery point',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LUT_DeliveryPointTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('short_name', models.CharField(db_index=True, default='', max_length=50, unique=True, verbose_name='short_name')),
                ('description', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='', verbose_name='description')),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='repanier.LUT_DeliveryPoint')),
            ],
            options={
                'db_tablespace': '',
                'default_permissions': (),
                'db_table': 'repanier_lut_deliverypoint_translation',
                'verbose_name': 'delivery point Translation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LUT_DepartmentForCustomer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='is_active')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='repanier.LUT_DepartmentForCustomer')),
            ],
            options={
                'verbose_name_plural': 'departments for customer',
                'verbose_name': 'department for customer',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LUT_DepartmentForCustomerTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('short_name', models.CharField(db_index=True, default='', max_length=50, unique=True, verbose_name='short_name')),
                ('description', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='', verbose_name='description')),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='repanier.LUT_DepartmentForCustomer')),
            ],
            options={
                'db_tablespace': '',
                'default_permissions': (),
                'db_table': 'repanier_lut_departmentforcustomer_translation',
                'verbose_name': 'department for customer Translation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LUT_PermanenceRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_counted_as_participation', models.BooleanField(default=True, verbose_name='is_counted_as_participation')),
                ('customers_may_register', models.BooleanField(default=True, verbose_name='customers_may_register')),
                ('is_active', models.BooleanField(default=True, verbose_name='is_active')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='repanier.LUT_PermanenceRole')),
            ],
            options={
                'verbose_name_plural': 'permanences roles',
                'verbose_name': 'permanence role',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LUT_PermanenceRoleTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('short_name', models.CharField(db_index=True, default='', max_length=50, unique=True, verbose_name='short_name')),
                ('description', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='', verbose_name='description')),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='repanier.LUT_PermanenceRole')),
            ],
            options={
                'db_tablespace': '',
                'default_permissions': (),
                'db_table': 'repanier_lut_permanencerole_translation',
                'verbose_name': 'permanence role Translation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LUT_ProductionMode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture2', repanier.picture.fields.AjaxPictureField(blank=True, null=True, verbose_name='picture')),
                ('is_active', models.BooleanField(default=True, verbose_name='is_active')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='repanier.LUT_ProductionMode')),
            ],
            options={
                'verbose_name_plural': 'production modes',
                'verbose_name': 'production mode',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LUT_ProductionModeTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('short_name', models.CharField(db_index=True, default='', max_length=50, unique=True, verbose_name='short_name')),
                ('description', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='', verbose_name='description')),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='repanier.LUT_ProductionMode')),
            ],
            options={
                'db_tablespace': '',
                'default_permissions': (),
                'db_table': 'repanier_lut_productionmode_translation',
                'verbose_name': 'production mode Translation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OfferItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture2', repanier.picture.fields.AjaxPictureField(blank=True, null=True, verbose_name='picture')),
                ('reference', models.CharField(blank=True, max_length=36, null=True, verbose_name='reference')),
                ('order_unit', models.CharField(choices=[('100', 'bought per piece'), ('105', 'bought per piece (price /kg)'), ('110', 'bought per piece (price /l)'), ('115', 'bought per piece (price /pc)'), ('120', 'bought per kg'), ('140', 'bought per piece, invoiced following the weight'), ('150', 'bought per l'), ('300', 'As a deposit, a bag : always add this product to preparation list when the customer has purchased something.'), ('600', 'Subscription'), ('500', 'As a transportation cost : add the minimal order quantity of this product to the basket representing the group.')], default='100', max_length=3, verbose_name='order unit')),
                ('order_average_weight', models.DecimalField(decimal_places=3, default=Decimal('0'), help_text='if useful, average order weight (eg : 0,1 Kg [i.e. 100 gr], 3 Kg)', max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='order_average_weight')),
                ('producer_unit_price', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='producer unit price')),
                ('customer_unit_price', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='customer unit price')),
                ('producer_vat', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=4, default=Decimal('0'), max_digits=8, verbose_name='vat')),
                ('customer_vat', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=4, default=Decimal('0'), max_digits=8, verbose_name='vat')),
                ('unit_deposit', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='deposit to add to the original unit price', max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='deposit')),
                ('vat_level', models.CharField(choices=[('100', 'none'), ('315', 'vat 2.1%'), ('325', 'vat 2.5%'), ('350', 'vat 3.8%'), ('360', 'vat 4%'), ('375', 'vat 5.5%'), ('400', 'vat 6%'), ('430', 'vat 8%'), ('460', 'vat 10%'), ('500', 'vat 12%'), ('590', 'vat 20%'), ('600', 'vat 21%')], default='400', max_length=3, verbose_name='tax')),
                ('wrapped', models.BooleanField(default=False, verbose_name='Individually wrapped by the producer')),
                ('customer_minimum_order_quantity', models.DecimalField(decimal_places=3, default=Decimal('1'), help_text='minimum order qty (eg : 0,1 Kg [i.e. 100 gr], 1 piece, 3 Kg)', max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='customer_minimum_order_quantity')),
                ('customer_increment_order_quantity', models.DecimalField(decimal_places=3, default=Decimal('1'), help_text='increment order qty (eg : 0,05 Kg [i.e. 50max 1 piece, 3 Kg)', max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='customer_increment_order_quantity')),
                ('customer_alert_order_quantity', models.DecimalField(decimal_places=3, default=25, help_text='maximum order qty before alerting the customer to check (eg : 1,5 Kg, 12 pieces, 9 Kg)', max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='customer_alert_order_quantity')),
                ('producer_order_by_quantity', models.DecimalField(decimal_places=3, default=Decimal('0'), help_text='1,5 Kg [i.e. 1500 gr], 1 piece, 3 Kg)', max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Producer order by quantity')),
                ('placement', models.CharField(choices=[('100', 'freezer'), ('200', 'fridge'), ('300', 'loose, out of the basket'), ('400', 'into the basket')], default='400', help_text='used for helping to determine the order of preparation of this product', max_length=3, verbose_name='product_placement')),
                ('stock', models.DecimalField(decimal_places=3, default=Decimal('999999'), max_digits=9, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Current stock')),
                ('limit_order_quantity_to_stock', models.BooleanField(default=False, verbose_name='limit maximum order qty of the group to stock qty')),
                ('is_box', models.BooleanField(default=False, verbose_name='is a box')),
                ('is_box_content', models.BooleanField(default=False, verbose_name='is a box content')),
                ('is_contract', models.BooleanField(default=False, verbose_name='is a contract')),
                ('is_contract_content', models.BooleanField(default=False, verbose_name='is a contract content')),
                ('is_active', models.BooleanField(default=True, verbose_name='is_active')),
                ('producer_price_are_wo_vat', models.BooleanField(default=False, verbose_name='producer price are wo vat')),
                ('price_list_multiplier', models.DecimalField(decimal_places=4, default=Decimal('0'), help_text='This multiplier is applied to each price automatically imported/pushed.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='price_list_multiplier')),
                ('is_resale_price_fixed', models.BooleanField(default=False, verbose_name='the resale price is set by the producer')),
                ('total_purchase_with_tax', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='Total purchase amount vat included', max_digits=8, verbose_name='producer amount invoiced')),
                ('total_selling_with_tax', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='Total selling amount vat included', max_digits=8, verbose_name='customer amount invoiced')),
                ('quantity_invoiced', models.DecimalField(decimal_places=4, default=Decimal('0'), help_text='quantity invoiced to our customer', max_digits=9, verbose_name='quantity invoiced')),
                ('may_order', models.BooleanField(default=True, verbose_name='may_order')),
                ('manage_replenishment', models.BooleanField(default=False, verbose_name='manage stock')),
                ('manage_production', models.BooleanField(default=False, verbose_name='manage production')),
                ('producer_pre_opening', models.BooleanField(default=False, verbose_name='producer pre-opening')),
                ('add_2_stock', models.DecimalField(decimal_places=4, default=Decimal('0'), max_digits=9, verbose_name='Add 2 stock')),
                ('new_stock', models.DecimalField(decimal_places=3, default=None, max_digits=9, null=True, verbose_name='Final stock')),
                ('department_for_customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='repanier.LUT_DepartmentForCustomer', verbose_name='department_for_customer')),
            ],
            options={
                'verbose_name': "offer's item",
                'verbose_name_plural': "offer's items",
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OfferItemTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('long_name', models.CharField(blank=True, default='', max_length=100, null=True, verbose_name='long_name')),
                ('cache_part_a', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='')),
                ('cache_part_b', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='')),
                ('order_sort_order', models.IntegerField(db_index=True, default=0, verbose_name='customer sort order for optimization')),
                ('preparation_sort_order', models.IntegerField(db_index=True, default=0, verbose_name='preparation sort order for optimization')),
                ('producer_sort_order', models.IntegerField(db_index=True, default=0, verbose_name='producer sort order for optimization')),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='repanier.OfferItem')),
            ],
            options={
                'db_tablespace': '',
                'default_permissions': (),
                'db_table': 'repanier_offeritem_translation',
                'verbose_name': "offer's item Translation",
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Permanence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('050', 'disabled'), ('100', 'planned'), ('110', 'wait for pre-open'), ('120', 'orders pre-opened'), ('200', 'wait for open'), ('300', 'orders opened'), ('350', 'wait for close'), ('370', 'orders closed'), ('400', 'wait for send'), ('500', 'orders send to producers'), ('600', 'wait for done'), ('700', 'invoices validation test failed'), ('800', 'invoiced'), ('900', 'archived'), ('950', 'cancelled')], default='100', help_text='status of the permanence from planned, orders opened, orders closed, send, done', max_length=3, verbose_name='permanence_status')),
                ('permanence_date', models.DateField(db_index=True, verbose_name='date')),
                ('payment_date', models.DateField(blank=True, db_index=True, null=True, verbose_name='payment_date')),
                ('total_purchase_with_tax', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='Total purchase amount vat included', max_digits=8, verbose_name='Total amount')),
                ('total_selling_with_tax', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='Total purchase amount vat included', max_digits=8, verbose_name='Total amount')),
                ('total_purchase_vat', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=4, default=Decimal('0'), help_text='Vat part of the total purchased', max_digits=9, verbose_name='Total vat')),
                ('total_selling_vat', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=4, default=Decimal('0'), help_text='Vat part of the total purchased', max_digits=9, verbose_name='Total vat')),
                ('with_delivery_point', models.BooleanField(default=False, verbose_name='with_delivery_point')),
                ('automatically_closed', models.BooleanField(default=False, verbose_name='automatically_closed')),
                ('is_updated_on', models.DateTimeField(auto_now=True, verbose_name='is_updated_on')),
                ('highest_status', models.CharField(choices=[('050', 'disabled'), ('100', 'planned'), ('110', 'wait for pre-open'), ('120', 'orders pre-opened'), ('200', 'wait for open'), ('300', 'orders opened'), ('350', 'wait for close'), ('370', 'orders closed'), ('400', 'wait for send'), ('500', 'orders send to producers'), ('600', 'wait for done'), ('700', 'invoices validation test failed'), ('800', 'invoiced'), ('900', 'archived'), ('950', 'cancelled')], default='100', help_text='status of the permanence from planned, orders opened, orders closed, send, done', max_length=3, verbose_name='highest permanence_status')),
                ('invoice_sort_order', models.IntegerField(blank=True, default=None, null=True, verbose_name='invoice sort order')),
                ('offer_description_on_home_page', models.BooleanField(default=True, verbose_name='Publish the offer description on the home page when the permanence is open')),
                ('picture', repanier.picture.fields.AjaxPictureField(blank=True, null=True, verbose_name='picture')),
                ('gauge', models.IntegerField(default=0, editable=False)),
                ('master_permanence', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='child_permanence', to='repanier.Permanence', verbose_name='master permanence')),
            ],
            options={
                'verbose_name_plural': 'orders',
                'verbose_name': 'order',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PermanenceBoard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permanence_date', models.DateField(db_index=True, verbose_name='permanence_date')),
                ('is_registered_on', models.DateTimeField(blank=True, null=True, verbose_name='is_registered_on')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='repanier.Customer', verbose_name='customer')),
                ('permanence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repanier.Permanence', verbose_name='Permanence')),
                ('permanence_role', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.LUT_PermanenceRole', verbose_name='permanence_role')),
            ],
            options={
                'verbose_name': 'permanence board',
                'verbose_name_plural': 'permanences board',
            },
        ),
        migrations.CreateModel(
            name='PermanenceTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('short_name', models.CharField(blank=True, max_length=50, verbose_name='offer name')),
                ('offer_description', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='', help_text='This message is send by mail to all customers when opening the order or on top ', verbose_name='offer_description')),
                ('invoice_description', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='', help_text='This message is send by mail to all customers having bought something when closing the permanence.', verbose_name='invoice_description')),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='repanier.Permanence')),
            ],
            options={
                'db_tablespace': '',
                'default_permissions': (),
                'db_table': 'repanier_permanence_translation',
                'verbose_name': 'order Translation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Producer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_profile_name', models.CharField(db_index=True, default='', max_length=25, unique=True, verbose_name='short_profile_name')),
                ('long_profile_name', models.CharField(default='', max_length=100, null=True, verbose_name='long_profile_name')),
                ('email', models.EmailField(blank=True, default='', max_length=254, null=True, verbose_name='email')),
                ('email2', models.EmailField(blank=True, default='', max_length=254, null=True, verbose_name='secondary email')),
                ('email3', models.EmailField(blank=True, default='', max_length=254, null=True, verbose_name='secondary email')),
                ('language', models.CharField(choices=[('fr', 'français')], default='fr', max_length=5, verbose_name='language')),
                ('phone1', models.CharField(blank=True, default='', max_length=25, null=True, verbose_name='phone1')),
                ('phone2', models.CharField(blank=True, default='', max_length=25, null=True, verbose_name='phone2')),
                ('bank_account', models.CharField(blank=True, default='', max_length=100, null=True, verbose_name='bank account')),
                ('vat_id', models.CharField(blank=True, default='', max_length=20, null=True, verbose_name='vat_id')),
                ('fax', models.CharField(blank=True, default='', max_length=100, null=True, verbose_name='fax')),
                ('address', models.TextField(blank=True, default='', null=True, verbose_name='address')),
                ('memo', models.TextField(blank=True, default='', null=True, verbose_name='memo')),
                ('reference_site', models.URLField(blank=True, default='', null=True, verbose_name='reference site')),
                ('web_services_activated', models.BooleanField(default=False, verbose_name='Web services activated')),
                ('uuid', models.CharField(db_index=True, default='', max_length=36, null=True, verbose_name='uuid')),
                ('offer_uuid', models.CharField(db_index=True, default='', max_length=36, null=True, verbose_name='uuid')),
                ('offer_filled', models.BooleanField(default=False, verbose_name='offer filled')),
                ('invoice_by_basket', models.BooleanField(default=False, verbose_name='invoice by basket')),
                ('manage_replenishment', models.BooleanField(default=False, verbose_name='manage stock')),
                ('manage_production', models.BooleanField(default=False, verbose_name='manage production')),
                ('producer_pre_opening', models.BooleanField(default=False, verbose_name='producer pre-opening')),
                ('producer_price_are_wo_vat', models.BooleanField(default=False, verbose_name='producer price are wo vat')),
                ('sort_products_by_reference', models.BooleanField(default=False, verbose_name='sort products by reference')),
                ('price_list_multiplier', models.DecimalField(blank=True, decimal_places=4, default=Decimal('1'), help_text='This multiplier is applied to each price automatically imported/pushed.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='price_list_multiplier')),
                ('is_resale_price_fixed', models.BooleanField(default=False, verbose_name='the resale price is set by the producer')),
                ('minimum_order_value', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='0 mean : no minimum order value.', max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='minimum order value')),
                ('date_balance', models.DateField(default=datetime.date.today, verbose_name='date_balance')),
                ('balance', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='balance')),
                ('initial_balance', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='initial balance')),
                ('represent_this_buyinggroup', models.BooleanField(default=False, verbose_name='represent_this_buyinggroup')),
                ('is_active', models.BooleanField(default=True, verbose_name='is_active')),
            ],
            options={
                'ordering': ('short_profile_name',),
                'verbose_name_plural': 'producers',
                'verbose_name': 'producer',
            },
        ),
        migrations.CreateModel(
            name='ProducerInvoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('050', 'disabled'), ('100', 'planned'), ('110', 'wait for pre-open'), ('120', 'orders pre-opened'), ('200', 'wait for open'), ('300', 'orders opened'), ('350', 'wait for close'), ('370', 'orders closed'), ('400', 'wait for send'), ('500', 'orders send to producers'), ('600', 'wait for done'), ('700', 'invoices validation test failed'), ('800', 'invoiced'), ('900', 'archived'), ('950', 'cancelled')], default='100', max_length=3, verbose_name='invoice_status')),
                ('date_previous_balance', models.DateField(default=datetime.date.today, verbose_name='date_previous_balance')),
                ('previous_balance', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='previous_balance')),
                ('total_price_with_tax', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='Total purchase amount vat included', max_digits=8, verbose_name='Total amount')),
                ('delta_price_with_tax', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='purchase to add amount vat included', max_digits=8, verbose_name='Total amount')),
                ('delta_transport', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='transport to add', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Delivery point transport')),
                ('total_vat', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=4, default=Decimal('0'), help_text='Vat part of the total purchased', max_digits=9, verbose_name='Total vat')),
                ('delta_vat', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=4, default=Decimal('0'), help_text='vat to add', max_digits=9, verbose_name='Total vat')),
                ('total_deposit', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='deposit to add to the original unit price', max_digits=8, verbose_name='deposit')),
                ('bank_amount_in', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='payment_on_the_account', max_digits=8, verbose_name='bank_amount_in')),
                ('bank_amount_out', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='payment_from_the_account', max_digits=8, verbose_name='bank_amount_out')),
                ('date_balance', models.DateField(default=datetime.date.today, verbose_name='date_balance')),
                ('balance', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='balance')),
                ('delta_stock_with_tax', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='stock taken amount vat included', max_digits=8, verbose_name='Total stock')),
                ('delta_stock_vat', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=4, default=Decimal('0'), help_text='vat to add', max_digits=9, verbose_name='Total stock vat')),
                ('delta_deposit', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='deposit to add', max_digits=8, verbose_name='deposit')),
                ('delta_stock_deposit', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='deposit to add', max_digits=8, verbose_name='deposit')),
                ('to_be_paid', models.BooleanField(choices=[(True, '💶'), (False, '')], default=False, verbose_name='to be paid')),
                ('calculated_invoiced_balance', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='calculated balance to be invoiced')),
                ('to_be_invoiced_balance', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='balance to be invoiced')),
                ('invoice_sort_order', models.IntegerField(blank=True, db_index=True, default=None, null=True, verbose_name='invoice sort order')),
                ('invoice_reference', models.CharField(blank=True, max_length=100, null=True, verbose_name='invoice reference')),
                ('permanence', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.Permanence', verbose_name='')),
                ('producer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.Producer', verbose_name='producer')),
            ],
            options={
                'verbose_name_plural': 'producers invoices',
                'verbose_name': 'producer invoice',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture2', repanier.picture.fields.AjaxPictureField(blank=True, null=True, verbose_name='picture')),
                ('reference', models.CharField(blank=True, max_length=36, null=True, verbose_name='reference')),
                ('order_unit', models.CharField(choices=[('100', 'bought per piece'), ('105', 'bought per piece (price /kg)'), ('110', 'bought per piece (price /l)'), ('115', 'bought per piece (price /pc)'), ('120', 'bought per kg'), ('140', 'bought per piece, invoiced following the weight'), ('150', 'bought per l'), ('300', 'As a deposit, a bag : always add this product to preparation list when the customer has purchased something.'), ('600', 'Subscription'), ('500', 'As a transportation cost : add the minimal order quantity of this product to the basket representing the group.')], default='100', max_length=3, verbose_name='order unit')),
                ('order_average_weight', models.DecimalField(decimal_places=3, default=Decimal('0'), help_text='if useful, average order weight (eg : 0,1 Kg [i.e. 100 gr], 3 Kg)', max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='order_average_weight')),
                ('producer_unit_price', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='producer unit price')),
                ('customer_unit_price', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='customer unit price')),
                ('producer_vat', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=4, default=Decimal('0'), max_digits=8, verbose_name='vat')),
                ('customer_vat', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=4, default=Decimal('0'), max_digits=8, verbose_name='vat')),
                ('unit_deposit', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='deposit to add to the original unit price', max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='deposit')),
                ('vat_level', models.CharField(choices=[('100', 'none'), ('315', 'vat 2.1%'), ('325', 'vat 2.5%'), ('350', 'vat 3.8%'), ('360', 'vat 4%'), ('375', 'vat 5.5%'), ('400', 'vat 6%'), ('430', 'vat 8%'), ('460', 'vat 10%'), ('500', 'vat 12%'), ('590', 'vat 20%'), ('600', 'vat 21%')], default='400', max_length=3, verbose_name='tax')),
                ('wrapped', models.BooleanField(default=False, verbose_name='Individually wrapped by the producer')),
                ('customer_minimum_order_quantity', models.DecimalField(decimal_places=3, default=Decimal('1'), help_text='minimum order qty (eg : 0,1 Kg [i.e. 100 gr], 1 piece, 3 Kg)', max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='customer_minimum_order_quantity')),
                ('customer_increment_order_quantity', models.DecimalField(decimal_places=3, default=Decimal('1'), help_text='increment order qty (eg : 0,05 Kg [i.e. 50max 1 piece, 3 Kg)', max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='customer_increment_order_quantity')),
                ('customer_alert_order_quantity', models.DecimalField(decimal_places=3, default=25, help_text='maximum order qty before alerting the customer to check (eg : 1,5 Kg, 12 pieces, 9 Kg)', max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='customer_alert_order_quantity')),
                ('producer_order_by_quantity', models.DecimalField(decimal_places=3, default=Decimal('0'), help_text='1,5 Kg [i.e. 1500 gr], 1 piece, 3 Kg)', max_digits=6, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Producer order by quantity')),
                ('placement', models.CharField(choices=[('100', 'freezer'), ('200', 'fridge'), ('300', 'loose, out of the basket'), ('400', 'into the basket')], default='400', help_text='used for helping to determine the order of preparation of this product', max_length=3, verbose_name='product_placement')),
                ('stock', models.DecimalField(decimal_places=3, default=Decimal('999999'), max_digits=9, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Current stock')),
                ('limit_order_quantity_to_stock', models.BooleanField(default=False, verbose_name='limit maximum order qty of the group to stock qty')),
                ('is_box', models.BooleanField(default=False, verbose_name='is a box')),
                ('is_box_content', models.BooleanField(default=False, verbose_name='is a box content')),
                ('is_contract', models.BooleanField(default=False, verbose_name='is a contract')),
                ('is_contract_content', models.BooleanField(default=False, verbose_name='is a contract content')),
                ('is_active', models.BooleanField(default=True, verbose_name='is_active')),
                ('is_into_offer', models.BooleanField(default=True, verbose_name='is_into_offer')),
                ('is_updated_on', models.DateTimeField(auto_now=True, verbose_name='is_updated_on')),
            ],
            options={
                'verbose_name_plural': 'products',
                'verbose_name': 'product',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Product_Translation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('long_name', models.CharField(max_length=100, verbose_name='long_name')),
                ('offer_description', djangocms_text_ckeditor.fields.HTMLField(blank=True, verbose_name='offer_description')),
            ],
            options={
                'verbose_name': 'Product translation',
            },
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('050', 'disabled'), ('100', 'planned'), ('110', 'wait for pre-open'), ('120', 'orders pre-opened'), ('200', 'wait for open'), ('300', 'orders opened'), ('350', 'wait for close'), ('370', 'orders closed'), ('400', 'wait for send'), ('500', 'orders send to producers'), ('600', 'wait for done'), ('700', 'invoices validation test failed'), ('800', 'invoiced'), ('900', 'archived'), ('950', 'cancelled')], default='100', max_length=3, verbose_name='invoice_status')),
                ('permanence_date', models.DateField(verbose_name='permanence_date')),
                ('is_box', models.BooleanField(default=False, verbose_name='is_box')),
                ('is_box_content', models.BooleanField(default=False, verbose_name='is_box')),
                ('quantity_ordered', models.DecimalField(decimal_places=4, default=Decimal('0'), max_digits=9, verbose_name='quantity ordered')),
                ('quantity_confirmed', models.DecimalField(decimal_places=4, default=Decimal('0'), max_digits=9, verbose_name='quantity confirmed')),
                ('quantity_for_preparation_sort_order', models.DecimalField(decimal_places=4, default=Decimal('0'), max_digits=9, verbose_name='quantity for preparation order_by')),
                ('quantity_invoiced', models.DecimalField(decimal_places=4, default=Decimal('0'), max_digits=9, verbose_name='quantity invoiced')),
                ('purchase_price', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='producer row price')),
                ('selling_price', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), max_digits=8, verbose_name='customer row price')),
                ('producer_vat', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=4, default=Decimal('0'), max_digits=8, verbose_name='vat')),
                ('customer_vat', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=4, default=Decimal('0'), max_digits=8, verbose_name='vat')),
                ('deposit', repanier.fields.RepanierMoneyField.ModelMoneyField(decimal_places=2, default=Decimal('0'), help_text='deposit to add to the original unit price', max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='deposit')),
                ('price_list_multiplier', models.DecimalField(blank=True, decimal_places=4, default=Decimal('1'), help_text='This multiplier is applied to each price automatically imported/pushed.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Customer price list multiplier')),
                ('is_resale_price_fixed', models.BooleanField(default=False, verbose_name='the resale price is set by the producer')),
                ('comment', models.CharField(blank=True, default='', max_length=100, null=True, verbose_name='comment')),
                ('is_updated_on', models.DateTimeField(auto_now=True, db_index=True, verbose_name='is_updated_on')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.Customer', verbose_name='customer')),
                ('customer_invoice', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.CustomerInvoice', verbose_name='customer_invoice')),
                ('customer_producer_invoice', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.CustomerProducerInvoice', verbose_name='customer_producer_invoice')),
                ('offer_item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.OfferItem', verbose_name='offer_item')),
                ('permanence', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.Permanence', verbose_name='Permanence')),
                ('producer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.Producer', verbose_name='producer')),
                ('producer_invoice', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.ProducerInvoice', verbose_name='producer_invoice')),
            ],
            options={
                'verbose_name': 'purchase',
                'ordering': ('permanence', 'customer', 'offer_item', 'is_box_content'),
                'verbose_name_plural': 'purchases',
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_attempt_counter', models.DecimalField(decimal_places=0, default=Decimal('0'), max_digits=2, verbose_name='login attempt counter')),
                ('is_reply_to_order_email', models.BooleanField(default=False, verbose_name='is_reply_to_order_email')),
                ('is_reply_to_invoice_email', models.BooleanField(default=False, verbose_name='is_reply_to_invoice_email')),
                ('is_contributor', models.BooleanField(default=False, verbose_name='is_contributor')),
                ('is_webmaster', models.BooleanField(default=False, verbose_name='is_webmaster')),
                ('is_coordinator', models.BooleanField(default=False, verbose_name='is_coordinator')),
                ('is_tester', models.BooleanField(default=False, verbose_name='is_tester')),
                ('password_reset_on', models.DateTimeField(blank=True, default=None, null=True, verbose_name='password_reset_on')),
                ('is_active', models.BooleanField(default=True, verbose_name='is_active')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('customer_responsible', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='repanier.Customer', verbose_name='customer_responsible')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='repanier.Staff')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='login')),
            ],
            options={
                'verbose_name_plural': 'staff members',
                'verbose_name': 'staff member',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StaffTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('long_name', models.CharField(db_index=True, default='', max_length=100, null=True, verbose_name='long_name')),
                ('function_description', djangocms_text_ckeditor.fields.HTMLField(blank=True, default='', verbose_name='function_description')),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='repanier.Staff')),
            ],
            options={
                'db_tablespace': '',
                'default_permissions': (),
                'db_table': 'repanier_staff_translation',
                'verbose_name': 'staff member Translation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('product_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='repanier.Product')),
                ('recurrences', recurrence.fields.RecurrenceField()),
            ],
            options={
                'verbose_name_plural': 'contracts',
                'verbose_name': 'contract',
            },
            bases=('repanier.product',),
        ),
        migrations.AddField(
            model_name='product_translation',
            name='master',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='repanier.Product'),
        ),
        migrations.AddField(
            model_name='product',
            name='department_for_customer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='repanier.LUT_DepartmentForCustomer', verbose_name='department_for_customer'),
        ),
        migrations.AddField(
            model_name='product',
            name='likes',
            field=models.ManyToManyField(related_name='likes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='product',
            name='permanences',
            field=models.ManyToManyField(blank=True, through='repanier.OfferItem', to='repanier.Permanence'),
        ),
        migrations.AddField(
            model_name='product',
            name='producer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.Producer', verbose_name='producer'),
        ),
        migrations.AddField(
            model_name='product',
            name='production_mode',
            field=models.ManyToManyField(blank=True, to='repanier.LUT_ProductionMode', verbose_name='production mode'),
        ),
        migrations.AddField(
            model_name='permanence',
            name='producers',
            field=models.ManyToManyField(blank=True, to='repanier.Producer', verbose_name='producers'),
        ),
        migrations.AddField(
            model_name='offeritem',
            name='permanence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.Permanence', verbose_name='Permanence'),
        ),
        migrations.AddField(
            model_name='offeritem',
            name='producer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.Producer', verbose_name='producer'),
        ),
        migrations.AddField(
            model_name='offeritem',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.Product', verbose_name='product'),
        ),
        migrations.AddField(
            model_name='deliveryboard',
            name='delivery_point',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.LUT_DeliveryPoint', verbose_name='delivery point'),
        ),
        migrations.AddField(
            model_name='deliveryboard',
            name='permanence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repanier.Permanence', verbose_name='Permanence'),
        ),
        migrations.AddField(
            model_name='customerproducerinvoice',
            name='permanence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.Permanence', verbose_name=''),
        ),
        migrations.AddField(
            model_name='customerproducerinvoice',
            name='producer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.Producer', verbose_name='producer'),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='delivery',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='repanier.DeliveryBoard', verbose_name='delivery board'),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='master_permanence',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='child_customer_invoice', to='repanier.Permanence', verbose_name='master permanence'),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='permanence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='repanier.Permanence', verbose_name=''),
        ),
        migrations.AddField(
            model_name='customer',
            name='delivery_point',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='repanier.LUT_DeliveryPoint', verbose_name='delivery point'),
        ),
        migrations.AddField(
            model_name='customer',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contractcontent',
            name='product',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='contract_content', to='repanier.Product', verbose_name='product'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='permanence_of_last_cancelled_invoice',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='repanier.Permanence'),
        ),
        migrations.AddField(
            model_name='boxcontent',
            name='product',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='box_content', to='repanier.Product', verbose_name='product'),
        ),
        migrations.AddField(
            model_name='bankaccount',
            name='customer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='repanier.Customer', verbose_name='customer'),
        ),
        migrations.AddField(
            model_name='bankaccount',
            name='customer_invoice',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='repanier.CustomerInvoice', verbose_name='customer_invoice'),
        ),
        migrations.AddField(
            model_name='bankaccount',
            name='permanence',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='repanier.Permanence', verbose_name='Permanence'),
        ),
        migrations.AddField(
            model_name='bankaccount',
            name='producer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='repanier.Producer', verbose_name='producer'),
        ),
        migrations.AddField(
            model_name='bankaccount',
            name='producer_invoice',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='repanier.ProducerInvoice', verbose_name='producer_invoice'),
        ),
        migrations.CreateModel(
            name='Box',
            fields=[
            ],
            options={
                'proxy': True,
                'verbose_name_plural': 'boxes',
                'verbose_name': 'box',
            },
            bases=('repanier.product',),
        ),
        migrations.CreateModel(
            name='CustomerSend',
            fields=[
            ],
            options={
                'proxy': True,
                'verbose_name_plural': 'customers',
                'verbose_name': 'customer',
            },
            bases=('repanier.customerproducerinvoice',),
        ),
        migrations.CreateModel(
            name='OfferItemClosed',
            fields=[
            ],
            options={
                'proxy': True,
                'verbose_name_plural': "offer's items",
                'verbose_name': "offer's item",
            },
            bases=('repanier.offeritem',),
        ),
        migrations.CreateModel(
            name='OfferItemSend',
            fields=[
            ],
            options={
                'proxy': True,
                'verbose_name_plural': "offer's items",
                'verbose_name': "offer's item",
            },
            bases=('repanier.offeritem',),
        ),
        migrations.CreateModel(
            name='OfferItemWoReceiver',
            fields=[
            ],
            options={
                'proxy': True,
                'verbose_name_plural': "offer's items",
                'verbose_name': "offer's item",
            },
            bases=('repanier.offeritem',),
        ),
        migrations.CreateModel(
            name='PermanenceDone',
            fields=[
            ],
            options={
                'proxy': True,
                'verbose_name_plural': 'In billing',
                'verbose_name': 'In billing',
            },
            bases=('repanier.permanence',),
        ),
        migrations.CreateModel(
            name='PermanenceInPreparation',
            fields=[
            ],
            options={
                'proxy': True,
                'verbose_name_plural': 'In preparation',
                'verbose_name': 'In preparation',
            },
            bases=('repanier.permanence',),
        ),
        migrations.AlterUniqueTogether(
            name='stafftranslation',
            unique_together=set([('language_code', 'master')]),
        ),
        migrations.AlterUniqueTogether(
            name='purchase',
            unique_together=set([('customer', 'offer_item', 'is_box_content')]),
        ),
        migrations.AlterIndexTogether(
            name='purchase',
            index_together=set([('permanence', 'customer_invoice')]),
        ),
        migrations.AlterUniqueTogether(
            name='product_translation',
            unique_together=set([('language_code', 'master')]),
        ),
        migrations.AlterUniqueTogether(
            name='product',
            unique_together=set([('producer', 'reference')]),
        ),
        migrations.AlterUniqueTogether(
            name='producerinvoice',
            unique_together=set([('permanence', 'producer')]),
        ),
        migrations.AlterUniqueTogether(
            name='permanencetranslation',
            unique_together=set([('language_code', 'master')]),
        ),
        migrations.AlterUniqueTogether(
            name='permanenceboard',
            unique_together=set([('permanence', 'permanence_role', 'customer')]),
        ),
        migrations.AlterIndexTogether(
            name='permanenceboard',
            index_together=set([('permanence_date', 'permanence', 'permanence_role')]),
        ),
        migrations.AlterUniqueTogether(
            name='offeritemtranslation',
            unique_together=set([('language_code', 'master')]),
        ),
        migrations.AlterUniqueTogether(
            name='offeritem',
            unique_together=set([('permanence', 'product')]),
        ),
        migrations.AlterIndexTogether(
            name='offeritem',
            index_together=set([('id', 'order_unit')]),
        ),
        migrations.AlterUniqueTogether(
            name='lut_productionmodetranslation',
            unique_together=set([('language_code', 'master')]),
        ),
        migrations.AlterUniqueTogether(
            name='lut_permanenceroletranslation',
            unique_together=set([('language_code', 'master')]),
        ),
        migrations.AlterUniqueTogether(
            name='lut_departmentforcustomertranslation',
            unique_together=set([('language_code', 'master')]),
        ),
        migrations.AlterUniqueTogether(
            name='lut_deliverypointtranslation',
            unique_together=set([('language_code', 'master')]),
        ),
        migrations.AlterUniqueTogether(
            name='deliveryboardtranslation',
            unique_together=set([('language_code', 'master')]),
        ),
        migrations.AlterUniqueTogether(
            name='customerproducerinvoice',
            unique_together=set([('permanence', 'customer', 'producer')]),
        ),
        migrations.AlterUniqueTogether(
            name='customerinvoice',
            unique_together=set([('permanence', 'customer')]),
        ),
        migrations.AlterIndexTogether(
            name='customer',
            index_together=set([('user', 'is_active', 'may_order')]),
        ),
        migrations.AddField(
            model_name='contractcontent',
            name='contract',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='repanier.Contract', verbose_name='contract'),
        ),
        migrations.AlterUniqueTogether(
            name='configurationtranslation',
            unique_together=set([('language_code', 'master')]),
        ),
        migrations.AddField(
            model_name='boxcontent',
            name='box',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='repanier.Box', verbose_name='box'),
        ),
        migrations.AlterIndexTogether(
            name='bankaccount',
            index_together=set([('operation_date', 'id'), ('producer_invoice', 'operation_date', 'operation_date', 'id'), ('customer_invoice', 'operation_date', 'id'), ('permanence', 'customer', 'producer', 'operation_date', 'id')]),
        ),
        migrations.AlterUniqueTogether(
            name='contractcontent',
            unique_together=set([('contract', 'product')]),
        ),
        migrations.AlterIndexTogether(
            name='contractcontent',
            index_together=set([('product', 'contract')]),
        ),
        migrations.AlterUniqueTogether(
            name='boxcontent',
            unique_together=set([('box', 'product')]),
        ),
        migrations.AlterIndexTogether(
            name='boxcontent',
            index_together=set([('product', 'box')]),
        ),
    ]
